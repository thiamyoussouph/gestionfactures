// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

enum Role {
  PROPRIETAIRE
  VENDEUR
  CAISSIER
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  role       Role      @default(VENDEUR)
  shopId     String?
  shop       Shop?     @relation("ShopMembers", fields: [shopId], references: [id]) // Relation pour les membres du shop
  shopsOwned Shop[]    @relation("ShopOwner") // Relation pour les shops possédés (PROPRIETAIRE)
  invoices   Invoice[] @relation("UserInvoices")
}

model Shop {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String
  ninea     String   @unique
  ownerId   String
  owner     User     @relation("ShopOwner", fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices Invoice[]
  users    User[]    @relation("ShopMembers")

  categories Category[] // ✅ Ajoute ceci
  products   Product[] // ✅ Et ceci
}

model Invoice {
  id            String        @id
  name          String
  issuerName    String        @default("")
  issuerAddress String        @default("")
  clientName    String        @default("")
  clientAddress String        @default("")
  invoiceDate   String        @default("")
  dueDate       String        @default("")
  vatActive     Boolean       @default(false)
  vatRate       Float         @default(20)
  status        Int           @default(1)
  lines         InvoiceLine[] @relation("InvoiceLines")
  userId        String
  createdById   User          @relation("UserInvoices", fields: [userId], references: [id])
  shopId        String
  shop          Shop          @relation(fields: [shopId], references: [id])
}

model InvoiceLine {
  id          String   @id @default(uuid())
  description String   @default("")
  quantity    Int      @default(0)
  unitPrice   Float    @default(0)
  invoiceId   String?
  invoice     Invoice? @relation("InvoiceLines", fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @default(uuid())
  name     String
  shopId   String
  shop     Shop      @relation(fields: [shopId], references: [id])
  products Product[]
}

model Product {
  id         String          @id @default(uuid())
  name       String
  price      Float
  quantity   Int             @default(0)
  imageUrl   String? //  Photo du produit
  barcode    String?         @unique //  Code-barres (optionnel mais unique)
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  shopId     String
  shop       Shop            @relation(fields: [shopId], references: [id])
  movements  StockMovement[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model StockMovement {
  id        String       @id @default(uuid())
  type      MovementType
  quantity  Int
  productId String
  product   Product      @relation(fields: [productId], references: [id])
  createdAt DateTime     @default(now())
}

enum MovementType {
  ENTRY // Entrée en stock (achat, approvisionnement)
  EXIT // Sortie (vente, perte)
  ADJUSTMENT // Ajustement manuel ou inventaire
}
